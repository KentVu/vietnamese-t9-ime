language: android
sudo: true

# Shamelessly copied from https://github.com/pestrada/android-tdd-playground/blob/master/app/build.gradle
android:
  components:
    # Uncomment the lines below if you want to
    # use the latest revision of Android SDK Tools
    - tools
    - platform-tools

    # The BuildTools version used by your project
    - build-tools-27.0.0

    # The SDK version used to compile your project
    - android-22
    - android-27

    # Additional components
    #- extra-google-google_play_services
    #- extra-google-m2repository
    - extra-android-m2repository
    #- addon-google_apis-google-19

    # Specify at least one system image,
    # if you need to run emulator(s) during your tests
    - sys-img-armeabi-v7a-android-22
    #- sys-img-armeabi-v7a-android-17

# ripped from https://github.com/googlesamples/android-ndk/blob/ae0bb4de/.travis.yml
addons:
  apt_packages:
    - pandoc

before_install:
  - git clone --depth=1 https://github.com/urho3d/android-ndk.git $HOME/android-ndk-root
  - export ANDROID_NDK_HOME=$HOME/android-ndk-root
  - export ANDROID_HOME=/usr/local/android-sdk
  - sudo sh -c 'mkdir -v $ANDROID_HOME/licenses && echo -ne "8933bad161af4178b1185d1a37fbf41ea5269c55\nd56f5187479451eabf01fb78af6dfcb131a6481e" > $ANDROID_HOME/licenses/android-sdk-license'

# Emulator Management: Create, Start and Wait
before_script:
  - echo no | android create avd --force -n test -t android-22 --abi armeabi-v7a
  - emulator -avd test -no-audio -no-window &
  - android-wait-for-emulator
  - adb shell input keyevent 82 &

script:
  - ./gradlew build connectedAndroidTest
  # print lint results details
  - for f in app/build/outputs/lint-results.html; do pandoc $f -t plain; done

deploy:
  #skip_cleanup: true
  provider: bintray
  file: "bintray-descriptor.json"
  user: "kentvu"
  key:
    secure: "hpZPPt/ygLw6fLlkLq64/xQNWf23Z7QDcS+xKvDQ6qX+ULUyrpav4v37KLTRHgtwOcG3HOScOQwkAa06HRBsSlCnTfNKpxS9Vs4rZPdyZaxYanumXHdLc47wvNC2EpzN22S4Juv4rKAtONHgFbZzggmTC9oC3Cb3OAA/+sgF3IdhC7uO+cfCw7PBaD8ZUYupu/8uorOyZcDAFhxyyBxoGGKUAbqcgKVhSMS+XmoVhPAc6wAlRQWWzz09nUK4eAG2m7g+3V192zy6BZb4J1JIIAeiEL5UnmF72u4Ar7fm+E2Uc7kxFnUFISNYbKn5tkruiUgPCzOXPScLhB7T/O0r108VHq9zppJWT/5Husv3udRgoPoY54JFNZmmC2VDbnQiH+GUxYW64jS16vqDAFsicEMdugNd8pc+pPRyv3ZaXT0JhsS+LjhstJlyEb7im4dxwRrYkzh7AHJFtiq4wHwlKcZADpe9LUvpgFXLoDBAOFVnKg0C8UL13tjNiqJJN9zSlRsEd54HHzykr1TwC5l70GlTSSjzToPqDlpCdx+mtiVFyVLmTKPerGZqspVcyZ6i5PlHCEubgc00uVb1BnglfFeZZoUfNdM7WLby78F5HPTTlJTpllNuGDVXBggSot0jwXrCEH0vkrTMbGOBiiMnMxJ2SuJ+trWC6gG0DZe/SIs="

#  passphrase: "Optional. In case a passphrase is configured on Bintray and GPG signing is used"
#  dry-run: "Optional. If true, skips sending requests to Bintray. Useful for testing your configuration"